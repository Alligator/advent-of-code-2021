file: read('day15.txt')
test: '1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581'
test_part1: 40
test_part2: 315

fn parse_input(lines) {
  var map = []
  var w = len(lines[0])
  var h = len(lines)
  for line in lines {
    for c in split(line, '') {
      map = push(map, num(c))
    }
  }
  return { map, w, h }
}

fn print_map(m) {
  for y in range(0, m['h']) {
    for x in range(0, m['w']) {
      print(m['map'][y * m['w'] + x])
    }
    println()
  }
}

# fn priority_q() {
#   return { q: [] }
# }
# fn q_push(q, item, priority) {
#   q['q'] = push(q['q'], [item, priority])
# }
# fn q_pop(q) {
#   var lowest_priority_index = 0
#   var lowest_priority = 99999999
#
#   for item, index in q['q'] {
#     var priority = item[1]
#     if priority < lowest_priority {
#       lowest_priority = priority
#       lowest_priority_index = index
#     }
#   }
#
#   var item = q['q'][lowest_priority_index][0]
#   q['q'] = delete(q['q'], lowest_priority_index)
#   return item
# }

fn priority_q() {
  return { q: [0], len: 0 }
}
fn q_push(q, item, priority) {
  q['q'] = push(q['q'], [item, priority])
  q['len'] = q['len'] + 1
  q_balance_up(q)
}
fn q_balance_up(q) {
  var i = q['len']
  for {
    if i / 2 == 0 {
      break
    }

    if q['q'][i][1] <= q['q'][i / 2][1] {
      var tmp = q['q'][i / 2]
      q['q'][i / 2] = q['q'][i]
      q['q'][i] = tmp
    }
    i = i / 2
  }
}
fn q_pop(q) {
  var item = q['q'][1][0]
  q['q'][1] = q['q'][q['len']]
  q['q'] = delete(q['q'], q['len'])
  q['len'] = q['len'] - 1
  q_balance_down(q)
  return item
}
fn q_balance_down(q) {
  var i = 1
  for {
    if i * 2 > q['len'] {
      break
    }
    var mc = nil
    if i * 2 + 1 > q['len'] {
      mc = i * 2
    } else if q['q'][i * 2][1] < q['q'][i * 2 + 1][1] {
      mc = i * 2
    } else {
      mc = i * 2 + 1
    }

    if q['q'][i][1] > q['q'][mc][1] {
      var tmp = q['q'][i]
      q['q'][i] = q['q'][mc]
      q['q'][mc] = tmp
    }
    i = mc
  }
}

part1: {
  var m = parse_input(lines)
  var map = m['map']
  var w = m['w']
  var h = m['h']

  var frontier = priority_q()
  q_push(frontier, [0, 0], 0)
  var came_from = {}
  var cost_so_far = { '0,0': 0 }

  for {
    if len(frontier['q']) == 0 {
      break
    }

    var current = q_pop(frontier)
    # println('exploring', current)

    var current_cost = cost_so_far[current[0] + ',' + current[1]]

    if current[0] == w-1 && current[1] == h-1 {
      break
    }

    var offsets = [[0, -1], [1, 0], [0, 1], [-1, 0]]
    for off in offsets {
      var nextx = current[0] + off[0]
      var nexty = current[1] + off[1]
      # println(' ', nextx, nexty)
      if nextx < 0 || nexty < 0 || nextx >= w || nexty >= h {
        # println('  oob')
        continue
      }

      var key = nextx + ',' + nexty
      var cost = map[nexty * w + nextx]
      var next_cost = cost + current_cost
      # println(' ', key, cost, next_cost)

      if cost_so_far[key] == nil || next_cost < cost_so_far[key] {
        cost_so_far[key] = next_cost
        q_push(frontier, [nextx, nexty], next_cost)
        came_from[key] = current
      }
    }
  }

  var current = [w-1, h-1]
  var path = []
  var total_cost = 0
  for {
    if current[0] == 0 && current[1] == 0 {
      break
    }
    path = push(path, current)
    total_cost = total_cost + map[current[1] * w + current[0]]
    current = came_from[current[0] + ',' + current[1]]
  }

  return total_cost
}

part2: {
  var m = parse_input(lines)
  var map = m['map']
  var w = m['w'] * 5
  var h = m['h'] * 5

  fn get_risk(x, y) {
    var mx = x % m['w']
    var my = y % m['h']
    var ox = x / m['w']
    var oy = y / m['h']
    var value = map[my * m['w'] + mx] + ox + oy
    if value >  9 {
      value = value % 10 + 1
    }
    return value
  }

  var frontier = priority_q()
  q_push(frontier, [0, 0], 0)
  var came_from = {}
  var cost_so_far = { '0,0': 0 }

  var i = 0
  for {
    if len(frontier['q']) == 0 {
      break
    }

    var current = q_pop(frontier)
    # println('exploring', current)

    var current_cost = cost_so_far[current[0] + ',' + current[1]]

    if current[0] == w-1 && current[1] == h-1 {
      break
    }

    var offsets = [[0, -1], [1, 0], [0, 1], [-1, 0]]
    for off in offsets {
      var nextx = current[0] + off[0]
      var nexty = current[1] + off[1]
      if nextx < 0 || nexty < 0 || nextx >= w || nexty >= h {
        continue
      }

      var key = nextx + ',' + nexty
      var cost = get_risk(nextx, nexty)
      var next_cost = cost + current_cost
      # println(' ', key, '-', cost, next_cost)

      if cost_so_far[key] == nil || next_cost < cost_so_far[key] {
        cost_so_far[key] = next_cost
        q_push(frontier, [nextx, nexty], next_cost)
        came_from[key] = current
      }
    }
  }

  var current = [w-1, h-1]
  var path = []
  var total_cost = 0

  var pd = {}

  for {
    if current[0] == 0 && current[1] == 0 {
      break
    }
    path = push(path, current)
    pd[current[1] * w + current[0]] = 1
    total_cost = total_cost + get_risk(current[0], current[1])
    current = came_from[current[0] + ',' + current[1]]
  }

  return total_cost
}
