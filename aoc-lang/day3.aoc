file: read('day3.txt')

test: '00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010'

test_part1: 198
test_part2: 230

part1: {
  var counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  for line in lines {
    for c, index in split(line, '') {
      counts[index] = counts[index] + num(c)
    }
  }

  var l = len(lines) / 2
  var gamma = 0
  var epsilon = 0

  var llen = len(lines[0])

  for c, index in counts {
    if index >= llen {
      break
    }
    gamma = gamma * 2
    epsilon = epsilon * 2
    if c > l {
      gamma = gamma + 1
    } else {
      epsilon = epsilon + 1
    }
  }

  return gamma * epsilon
}

part2: {
  fn countBit(values, bitIndex) {
    var count = 0
    for v in values {
      var b = num(v[bitIndex])
      count = count + b
    }
    return count
  }

  fn binToNum(bin) {
    var result = 0
    for c in split(bin, '') {
      var b = num(c)
      result = result * 2 + b
    }
    return result
  }

  fn criteria(comp) {
    var candidates = []
    for line in lines {
      candidates = push(candidates, line)
    }

    var bit = 0

    for c, i in split(lines[0], '') {
      var llen = (len(candidates) + 1) / 2
      var count = countBit(candidates, bit)

      var b = 0
      if comp(count, llen) {
        b = 1
      }

      var newCandidates = []
      for cand in candidates {
        if num(cand[bit]) == b {
          newCandidates = push(newCandidates, cand)
        }
      }
      candidates = newCandidates

      if len(candidates) == 1 {
        break
      }

      bit = bit + 1
    }

    return binToNum(candidates[0])
  }

  var oxygen = criteria(fn(count, llen) { return count >= llen })
  var co = criteria(fn(count, llen) { return count < llen })

  return co * oxygen
}
